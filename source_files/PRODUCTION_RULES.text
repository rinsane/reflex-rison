translation_unit
	: external_declaration
	| translation_unit external_declaration
	;

primary_expression
	: IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	| LeftParenthesis expression RightParenthesis
	;

postfix_expression
	: primary_expression
	| postfix_expression LeftBracket expression RightBracket
	| postfix_expression LeftParenthesis RightParenthesis
	| postfix_expression LeftParenthesis argument_expression_list RightParenthesis
	| postfix_expression Dot IDENTIFIER
	| postfix_expression PTR_OP IDENTIFIER
	| postfix_expression INC_OP
	| postfix_expression DEC_OP
	;

argument_expression_list
	: assignment_expression
	| argument_expression_list Comma assignment_expression
	;

unary_expression
	: postfix_expression
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator cast_expression
	| SIZEOF unary_expression
	| SIZEOF LeftParenthesis type_name LeftParenthesis
	;

unary_operator
	: Ampersand
	| Asterisk
	| Plus
	| Minus
	| Tilde
	| Exclamation
	;

cast_expression
	: unary_expression
	| LeftParenthesis type_name RightParenthesis cast_expression
	;

multiplicative_expression
	: cast_expression
	| multiplicative_expression Asterisk cast_expression
	| multiplicative_expression Slash cast_expression
	| multiplicative_expression Percent cast_expression
	;

additive_expression
	: multiplicative_expression
	| additive_expression Plus multiplicative_expression
	| additive_expression Minus multiplicative_expression
	;

shift_expression
	: additive_expression
	| shift_expression LEFT_OP additive_expression
	| shift_expression RIGHT_OP additive_expression
	;

relational_expression
	: shift_expression
	| relational_expression LessThan shift_expression
	| relational_expression GreaterThan shift_expression
	| relational_expression LE_OP shift_expression
	| relational_expression GE_OP shift_expression
	;

equality_expression
	: relational_expression
	| equality_expression EQ_OP relational_expression
	| equality_expression NE_OP relational_expression
	;

and_expression
	: equality_expression
	| and_expression Ampersand equality_expression
	;

exclusive_or_expression
	: and_expression
	| exclusive_or_expression Caret and_expression
	;

inclusive_or_expression
	: exclusive_or_expression
	| inclusive_or_expression VerticalBar exclusive_or_expression
	;

logical_and_expression
	: inclusive_or_expression
	| logical_and_expression AND_OP inclusive_or_expression
	;

logical_or_expression
	: logical_and_expression
	| logical_or_expression OR_OP logical_and_expression
	;

conditional_expression
	: logical_or_expression
	| logical_or_expression QuestionMark expression Colon conditional_expression
	;

assignment_expression
	: conditional_expression
	| unary_expression assignment_operator assignment_expression
	;

assignment_operator
	: Equal
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	;

expression
	: assignment_expression
	| expression Comma assignment_expression
	;

constant_expression
	: conditional_expression
	;

declaration
	: declaration_specifiers Semicolon
	| declaration_specifiers init_declarator_list Semicolon
	;

declaration_specifiers
	: storage_class_specifier
	| storage_class_specifier declaration_specifiers
	| type_specifier
	| type_qualifier
	| type_qualifier declaration_specifiers
	;

init_declarator_list
	: init_declarator
	| init_declarator_list Comma init_declarator
	;

init_declarator
	: declarator
	| declarator Equal initializer
	;

storage_class_specifier
	: TYPEDEF
	| EXTERN
	| STATIC
	| AUTO
	| REGISTER
	;

type_specifier
	: VOID
	| CHAR
	| SHORT
	| INT
	| LONG
	| FLOAT
	| DOUBLE
	| SIGNED
	| UNSIGNED
	| struct_or_union_specifier
	| enum_specifier
	| TYPE_NAME
	;

struct_or_union_specifier
	: struct_or_union IDENTIFIER LeftBrace struct_declaration_list RightBrace
	| struct_or_union LeftBrace struct_declaration_list RightBrace
	| struct_or_union IDENTIFIER
	;

struct_or_union
	: STRUCT
	| UNION
	;

struct_declaration_list
	: struct_declaration
	| struct_declaration_list struct_declaration
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list Semicolon
	;

specifier_qualifier_list
	: type_specifier specifier_qualifier_list
	| type_specifier
	| type_qualifier specifier_qualifier_list
	| type_qualifier
	;

struct_declarator_list
	: struct_declarator
	| struct_declarator_list Comma struct_declarator
	;

struct_declarator
	: declarator
	| Colon constant_expression
	| declarator Colon constant_expression
	;

enum_specifier
	: ENUM LeftBrace enumerator_list RightBrace
	| ENUM IDENTIFIER LeftBrace enumerator_list RightBrace
	| ENUM IDENTIFIER
	;

enumerator_list
	: enumerator
	| enumerator_list Comma enumerator
	;

enumerator
	: IDENTIFIER
	| IDENTIFIER Equal constant_expression
	;

type_qualifier
	: CONST
	| VOLATILE
	;

declarator
	: pointer direct_declarator
	| direct_declarator
	;

direct_declarator
	: IDENTIFIER
	| LeftParenthesis declarator RightParenthesis
	| direct_declarator LeftBracket constant_expression RightBracket
	| direct_declarator LeftBracket RightBracket
	| direct_declarator LeftParenthesis parameter_type_list RightParenthesis
	| direct_declarator LeftParenthesis identifier_list RightParenthesis
	| direct_declarator LeftParenthesis RightParenthesis
	;

pointer
	: Asterisk
	| Asterisk type_qualifier_list
	| Asterisk pointer
	| Asterisk type_qualifier_list pointer
	;

type_qualifier_list
	: type_qualifier
	| type_qualifier_list type_qualifier
	;


parameter_type_list
	: parameter_list
	| parameter_list Comma ELLIPSIS
	;

parameter_list
	: parameter_declaration
	| parameter_list Comma parameter_declaration
	;

parameter_declaration
	: declaration_specifiers declarator
	| declaration_specifiers abstract_declarator
	| declaration_specifiers
	;

identifier_list
	: IDENTIFIER
	| identifier_list Comma IDENTIFIER
	;

type_name
	: specifier_qualifier_list
	| specifier_qualifier_list abstract_declarator
	;

abstract_declarator
	: pointer
	| direct_abstract_declarator
	| pointer direct_abstract_declarator
	;

direct_abstract_declarator
	: LeftParenthesis abstract_declarator RightParenthesis
	| LeftBracket RightBracket
	| LeftBracket constant_expression RightBracket
	| direct_abstract_declarator LeftBracket RightBracket
	| direct_abstract_declarator LeftBracket constant_expression RightBracket
	| LeftParenthesis RightParenthesis
	| LeftParenthesis parameter_type_list RightParenthesis
	| direct_abstract_declarator LeftParenthesis RightParenthesis
	| direct_abstract_declarator LeftParenthesis parameter_type_list RightParenthesis
	;

initializer
	: assignment_expression
	| LeftBrace initializer_list RightBrace
	| LeftBrace initializer_list Comma RightBrace
	;

initializer_list
	: initializer
	| initializer_list Comma initializer
	;

statement
	: labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

labeled_statement
	: IDENTIFIER Colon statement
	| CASE constant_expression Colon statement
	| DEFAULT Colon statement
	;

compound_statement
	: LeftBrace RightBrace
	| LeftBrace statement_list RightBrace
	| LeftBrace declaration_list RightBrace
	| LeftBrace declaration_list statement_list RightBrace
	;

declaration_list
	: declaration
	| declaration_list declaration
	;

statement_list
	: statement
	| statement_list statement
	;

expression_statement
	: Semicolon
	| expression Semicolon
	;

selection_statement
	: IF LeftParenthesis expression RightParenthesis statement
	| IF LeftParenthesis expression RightParenthesis statement ELSE statement
	| SWITCH LeftParenthesis expression RightParenthesis statement
	;

iteration_statement
	: WHILE LeftParenthesis expression RightParenthesis statement
	| DO statement WHILE LeftParenthesis expression RightParenthesis Semicolon
	| FOR LeftParenthesis expression_statement expression_statement RightParenthesis statement
	| FOR LeftParenthesis expression_statement expression_statement expression RightParenthesis statement
	;

jump_statement
	: GOTO IDENTIFIER Semicolon
	| CONTINUE Semicolon
	| BREAK Semicolon
	| RETURN Semicolon
	| RETURN expression Semicolon
	;

external_declaration
	: function_definition
	| declaration
	;

function_definition
	: declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	| declarator declaration_list compound_statement
	| declarator compound_statement
	;